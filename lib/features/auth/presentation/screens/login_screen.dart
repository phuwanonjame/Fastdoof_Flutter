import 'package:flutter/material.dart';
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Import: ‡∏à‡∏≤‡∏Å lib/features/auth/ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á lib/features/menu/
import '../../../menu/presentation/screens/menu_screen.dart'; 
// ‡πÄ‡∏û‡∏¥‡πà‡∏° Import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
import 'forgot_password_screen.dart'; 
// *** ‡πÄ‡∏û‡∏¥‡πà‡∏° Import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ***
import 'role_selection_screen.dart'; 
// üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£ Import ‡πÄ‡∏õ‡πá‡∏ô StoreVerificationScreen
import 'store_verification_screen.dart'; 

// ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

// *** ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å SingleTickerProviderProviderMixin ‡πÄ‡∏õ‡πá‡∏ô SingleTickerProviderStateMixin ***
class _LoginScreenState extends State<LoginScreen> with SingleTickerProviderStateMixin {
  
  // Tab Controller (‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏ö‡∏ö late ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô initState)
  late TabController _tabController; 

  // ‡πÉ‡∏ä‡πâ Controller ‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô (Store Key)
  final TextEditingController _storeKeyController = TextEditingController(); 
  
  // 1. ‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å (CI Color) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ: ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏ß‡πà‡∏≤‡∏á
  final Color _primaryColor = const Color(0xFF007AFF); 

  // 2. ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á Light Mode (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠)
  final Color _lightBackgroundColor = Colors.white; // ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
  final Color _lightCardColor = const Color(0xFFF0F0F0); // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á TextField
  
  // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á
  final Color _onLightBackground = Colors.black87; 

  @override
  void initState() {
    super.initState();
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á TabController ‡∏ó‡∏µ‡πà‡∏°‡∏µ 2 tabs
    _tabController = TabController(length: 2, vsync: this); 
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Store Key (‡∏ä‡∏±‡πâ‡∏ô 1)
  void _loginWithStoreKey() {
    final key = _storeKeyController.text;

    if (key.length >= 4) {
      // *** üí° ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ä‡∏±‡πâ‡∏ô 2 ***
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (context) => const StoreVerificationScreen()), // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô 4 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ', style: TextStyle(color: Colors.white)), 
          backgroundColor: Colors.red,
        ),
      );
    }
  }
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ QR Code (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ QR Code ‡∏ô‡∏±‡πâ‡∏ô‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
  void _loginWithQRCode() {
    ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô...', style: TextStyle(color: Colors.white)),
          backgroundColor: Colors.green,
        ),
      );
    // *** üí° ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ä‡∏±‡πâ‡∏ô 2 ***
    Navigator.of(context).pushReplacement(
        MaterialPageRoute(builder: (context) => const StoreVerificationScreen()), // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    );
  }


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  void _goToForgotPassword() {
    Navigator.of(context).push(
      MaterialPageRoute(builder: (context) => const ForgotPasswordScreen()),
    );
  }

  @override
  void dispose() {
    _storeKeyController.dispose(); 
    _tabController.dispose(); 
    super.dispose();
  }

  // **********************************
  // WIDGETS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Tab
  // **********************************
  
  // Tab 1: ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Store Key
  Widget _buildStoreKeyLogin() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        // ‡∏ü‡∏¥‡∏•‡∏î‡πå Store Key
        TextField(
          controller: _storeKeyController, 
          // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
          style: TextStyle(color: _onLightBackground, fontSize: 20, fontWeight: FontWeight.bold), 
          keyboardType: TextInputType.number,
          obscureText: true, // ‡∏ã‡πà‡∏≠‡∏ô Pin
          decoration: InputDecoration(
            // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Label
            labelText: 'Store Key (‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô/‡∏™‡∏≤‡∏Ç‡∏≤)', 
            // ‡∏™‡∏µ Label ‡πÅ‡∏•‡∏∞ Hint
            labelStyle: TextStyle(color: Colors.grey[600]), 
            // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Hint
            hintText: '‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô 4-6 ‡∏´‡∏•‡∏±‡∏Å', 
            hintStyle: TextStyle(color: Colors.grey[400]),
            
            // ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô Light Mode
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(12), 
              borderSide: BorderSide.none, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            ),
            focusedBorder: OutlineInputBorder( 
              borderRadius: BorderRadius.circular(12),
              borderSide: BorderSide(color: _primaryColor, width: 2), // Focus ‡∏™‡∏µ CI
            ),
            filled: true,
            fillColor: _lightCardColor, // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
            prefixIcon: Icon(Icons.store, color: Colors.grey[600]), // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Icon ‡πÄ‡∏õ‡πá‡∏ô Icon ‡∏£‡πâ‡∏≤‡∏ô
          ),
        ),
        const SizedBox(height: 30),

        // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        ElevatedButton(
          onPressed: _loginWithStoreKey, // üí° ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Store Key
          style: ElevatedButton.styleFrom(
            minimumSize: const Size(double.infinity, 56),
            backgroundColor: _primaryColor, 
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
            ),
            elevation: 5,
          ),
          child: const Text(
            '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô', // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
        ),
      ],
    );
  }
  
  // Tab 2: ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ QR Code
  Widget _buildQRCodeLogin() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.qr_code_scanner, size: 120, color: _primaryColor),
          const SizedBox(height: 20),
          Text(
            '‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏£‡πâ‡∏≤‡∏ô', // üí° ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö
            // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥/‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
            style: TextStyle(fontSize: 18, color: Colors.grey[700]),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 40),
          // ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á)
          ElevatedButton.icon(
            onPressed: _loginWithQRCode, // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            icon: const Icon(Icons.camera_alt),
            label: const Text('‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô QR'),
            style: ElevatedButton.styleFrom(
              minimumSize: const Size(200, 50),
              backgroundColor: Colors.green, 
              foregroundColor: Colors.white,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
      backgroundColor: _lightBackgroundColor,
      
      body: Center(
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(32.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: <Widget>[
                // ‡πÇ‡∏•‡πÇ‡∏Å‡πâ
                Center(
                  child: Icon(Icons.fastfood, size: 80, color: _primaryColor),
                ),
                const SizedBox(height: 20),
                Text(
                  'FastFood',
                  textAlign: TextAlign.center,
                  // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥
                  style: TextStyle(fontSize: 32, fontWeight: FontWeight.w800, color: _onLightBackground),
                ),
                const SizedBox(height: 10),
                Text(
                  '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏™‡∏≤‡∏Ç‡∏≤', // üí° ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö
                  textAlign: TextAlign.center,
                  // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
                  style: TextStyle(fontSize: 16, color: Colors.grey[700]),
                ),
                const SizedBox(height: 40),
                
                // Tab Bar
                TabBar(
                  controller: _tabController,
                  indicatorColor: _primaryColor,
                  labelColor: _primaryColor, // ‡∏™‡∏µ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ CI
                  unselectedLabelColor: Colors.grey[500], // ‡∏™‡∏µ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
                  tabs: const [
                    Tab(icon: Icon(Icons.lock), text: 'Store Key'), // üí° ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö
                    Tab(icon: Icon(Icons.qr_code), text: 'QR Code'),
                  ],
                ),
                const SizedBox(height: 30),
                
                // Tab View
                SizedBox(
                  height: 300, 
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      _buildStoreKeyLogin(), // üí° ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Store Key
                      _buildQRCodeLogin(),
                    ],
                  ),
                ),
                
                // ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (Option)
                const SizedBox(height: 15),
                TextButton(
                  onPressed: _goToForgotPassword, 
                  child: Text(
                    '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤/‡∏•‡∏∑‡∏° Store Key?', // üí° ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö
                    style: TextStyle(color: _primaryColor), // ‡∏™‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ CI
                  ),
                ),
                const SizedBox(height: 20), 
              ],
            ),
          ),
        ),
      ),
    );
  }
}